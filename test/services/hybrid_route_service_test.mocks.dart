// Mocks generated by Mockito 5.4.5 from annotations
// in ridelink/test/services/hybrid_route_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ridelink/models/place_models.dart' as _i2;
import 'package:ridelink/models/ride_group.dart' as _i5;
import 'package:ridelink/services/free_routing_service.dart' as _i3;
import 'package:ridelink/services/route_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRouteInfo_0 extends _i1.SmartFake implements _i2.RouteInfo {
  _FakeRouteInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IFreeRoutingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFreeRoutingService extends _i1.Mock
    implements _i3.IFreeRoutingService {
  MockIFreeRoutingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.RouteInfo> calculateRoute(
    _i5.LatLng? origin,
    _i5.LatLng? destination,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateRoute,
          [
            origin,
            destination,
          ],
        ),
        returnValue: _i4.Future<_i2.RouteInfo>.value(_FakeRouteInfo_0(
          this,
          Invocation.method(
            #calculateRoute,
            [
              origin,
              destination,
            ],
          ),
        )),
      ) as _i4.Future<_i2.RouteInfo>);

  @override
  _i4.Future<_i2.RouteInfo> getRouteWithWaypoints(
    _i5.LatLng? origin,
    _i5.LatLng? destination,
    List<_i5.LatLng>? waypoints,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRouteWithWaypoints,
          [
            origin,
            destination,
            waypoints,
          ],
        ),
        returnValue: _i4.Future<_i2.RouteInfo>.value(_FakeRouteInfo_0(
          this,
          Invocation.method(
            #getRouteWithWaypoints,
            [
              origin,
              destination,
              waypoints,
            ],
          ),
        )),
      ) as _i4.Future<_i2.RouteInfo>);

  @override
  _i4.Future<List<_i5.LatLng>> getOptimizedWaypoints(
          List<_i5.LatLng>? locations) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOptimizedWaypoints,
          [locations],
        ),
        returnValue: _i4.Future<List<_i5.LatLng>>.value(<_i5.LatLng>[]),
      ) as _i4.Future<List<_i5.LatLng>>);

  @override
  _i4.Future<double> estimateFare(_i2.RouteInfo? route) => (super.noSuchMethod(
        Invocation.method(
          #estimateFare,
          [route],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<bool> isServiceAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isServiceAvailable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getRemainingDailyRequests() => (super.noSuchMethod(
        Invocation.method(
          #getRemainingDailyRequests,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [IRouteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRouteService extends _i1.Mock implements _i6.IRouteService {
  MockIRouteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.RouteInfo> calculateRoute(
    _i5.LatLng? origin,
    _i5.LatLng? destination,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateRoute,
          [
            origin,
            destination,
          ],
        ),
        returnValue: _i4.Future<_i2.RouteInfo>.value(_FakeRouteInfo_0(
          this,
          Invocation.method(
            #calculateRoute,
            [
              origin,
              destination,
            ],
          ),
        )),
      ) as _i4.Future<_i2.RouteInfo>);

  @override
  _i4.Future<List<_i5.LatLng>> getOptimizedWaypoints(
          List<_i5.LatLng>? locations) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOptimizedWaypoints,
          [locations],
        ),
        returnValue: _i4.Future<List<_i5.LatLng>>.value(<_i5.LatLng>[]),
      ) as _i4.Future<List<_i5.LatLng>>);

  @override
  _i4.Future<double> estimateFare(_i2.RouteInfo? route) => (super.noSuchMethod(
        Invocation.method(
          #estimateFare,
          [route],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<_i2.RouteInfo> getRouteWithWaypoints(
    _i5.LatLng? origin,
    _i5.LatLng? destination,
    List<_i5.LatLng>? waypoints,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRouteWithWaypoints,
          [
            origin,
            destination,
            waypoints,
          ],
        ),
        returnValue: _i4.Future<_i2.RouteInfo>.value(_FakeRouteInfo_0(
          this,
          Invocation.method(
            #getRouteWithWaypoints,
            [
              origin,
              destination,
              waypoints,
            ],
          ),
        )),
      ) as _i4.Future<_i2.RouteInfo>);
}
