// Mocks generated by Mockito 5.4.5 from annotations
// in ridelink/test/features/join_request_system_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_messaging/firebase_messaging.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:ridelink/models/ride_group.dart' as _i4;
import 'package:ridelink/services/notification_service.dart' as _i6;
import 'package:ridelink/services/ride_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IRideService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRideService extends _i1.Mock implements _i2.IRideService {
  MockIRideService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> createRide(_i4.RideGroup? ride) => (super.noSuchMethod(
        Invocation.method(
          #createRide,
          [ride],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createRide,
            [ride],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<_i4.RideGroup?> getRide(String? rideId) => (super.noSuchMethod(
        Invocation.method(
          #getRide,
          [rideId],
        ),
        returnValue: _i3.Future<_i4.RideGroup?>.value(),
      ) as _i3.Future<_i4.RideGroup?>);

  @override
  _i3.Future<List<_i4.RideGroup>> searchRides(Map<String, dynamic>? criteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRides,
          [criteria],
        ),
        returnValue: _i3.Future<List<_i4.RideGroup>>.value(<_i4.RideGroup>[]),
      ) as _i3.Future<List<_i4.RideGroup>>);

  @override
  _i3.Future<List<_i4.RideGroup>> getNearbyRides(
    double? lat,
    double? lng, {
    double? radiusKm = 50.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNearbyRides,
          [
            lat,
            lng,
          ],
          {#radiusKm: radiusKm},
        ),
        returnValue: _i3.Future<List<_i4.RideGroup>>.value(<_i4.RideGroup>[]),
      ) as _i3.Future<List<_i4.RideGroup>>);

  @override
  _i3.Future<List<_i4.RideGroup>> getUserRides(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserRides,
          [userId],
        ),
        returnValue: _i3.Future<List<_i4.RideGroup>>.value(<_i4.RideGroup>[]),
      ) as _i3.Future<List<_i4.RideGroup>>);

  @override
  _i3.Future<void> updateRide(_i4.RideGroup? ride) => (super.noSuchMethod(
        Invocation.method(
          #updateRide,
          [ride],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelRide(
    String? rideId,
    String? reason,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelRide,
          [
            rideId,
            reason,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> requestToJoin(
    String? rideId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestToJoin,
          [
            rideId,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> approveJoinRequest(
    String? rideId,
    String? requesterId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #approveJoinRequest,
          [
            rideId,
            requesterId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> rejectJoinRequest(
    String? rideId,
    String? requesterId,
    String? reason,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rejectJoinRequest,
          [
            rideId,
            requesterId,
            reason,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeMember(
    String? rideId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMember,
          [
            rideId,
            memberId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> startRide(String? rideId) => (super.noSuchMethod(
        Invocation.method(
          #startRide,
          [rideId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> completeRide(String? rideId) => (super.noSuchMethod(
        Invocation.method(
          #completeRide,
          [rideId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i4.RideGroup?> getRideStream(String? rideId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRideStream,
          [rideId],
        ),
        returnValue: _i3.Stream<_i4.RideGroup?>.empty(),
      ) as _i3.Stream<_i4.RideGroup?>);

  @override
  _i3.Stream<List<_i4.RideGroup>> getUserRidesStream(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserRidesStream,
          [userId],
        ),
        returnValue: _i3.Stream<List<_i4.RideGroup>>.empty(),
      ) as _i3.Stream<List<_i4.RideGroup>>);

  @override
  _i3.Future<double> calculateDistance(
    _i4.LatLng? from,
    _i4.LatLng? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateDistance,
          [
            from,
            to,
          ],
        ),
        returnValue: _i3.Future<double>.value(0.0),
      ) as _i3.Future<double>);

  @override
  _i3.Future<double> calculateFare(
    _i4.LatLng? from,
    _i4.LatLng? to,
    int? passengers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateFare,
          [
            from,
            to,
            passengers,
          ],
        ),
        returnValue: _i3.Future<double>.value(0.0),
      ) as _i3.Future<double>);
}

/// A class which mocks [INotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockINotificationService extends _i1.Mock
    implements _i6.INotificationService {
  MockINotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i7.RemoteMessage> get onMessage => (super.noSuchMethod(
        Invocation.getter(#onMessage),
        returnValue: _i3.Stream<_i7.RemoteMessage>.empty(),
      ) as _i3.Stream<_i7.RemoteMessage>);

  @override
  _i3.Stream<_i7.RemoteMessage> get onMessageOpenedApp => (super.noSuchMethod(
        Invocation.getter(#onMessageOpenedApp),
        returnValue: _i3.Stream<_i7.RemoteMessage>.empty(),
      ) as _i3.Stream<_i7.RemoteMessage>);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> subscribeToTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #subscribeToTopic,
          [topic],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> unsubscribeFromTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromTopic,
          [topic],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> sendJoinRequestNotification(
    String? leaderId,
    String? rideDestination,
    String? requesterName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendJoinRequestNotification,
          [
            leaderId,
            rideDestination,
            requesterName,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> sendJoinRequestResponseNotification(
    String? userId,
    String? rideDestination,
    bool? approved,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendJoinRequestResponseNotification,
          [
            userId,
            rideDestination,
            approved,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
